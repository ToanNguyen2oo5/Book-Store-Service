package com.bookstore.book_sell_service.services;


import com.bookstore.book_sell_service.dto.FetchTinhHuyen.DistrictFullApiResponse;
import com.bookstore.book_sell_service.dto.FetchTinhHuyen.ProvinceApiResponse;
import com.bookstore.book_sell_service.entity.QuanHuyen;
import com.bookstore.book_sell_service.entity.Tinh;
import com.bookstore.book_sell_service.repositories.QuanHuyenRepository;
import com.bookstore.book_sell_service.repositories.TinhRepository;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.http.MediaType;
import org.springframework.http.client.JdkClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestClient;

import java.net.http.HttpClient;
import java.util.*;

@Service
@RequiredArgsConstructor
@Slf4j
public class ProvinceDataInitService implements CommandLineRunner {

    private final TinhRepository tinhRepository;
    private final QuanHuyenRepository quanHuyenRepository;
    private final ObjectMapper objectMapper;

    private static final String PROVINCE_API_URL = "https://provinces.open-api.vn/api/p/";
    private static final String DISTRICT_API_URL = "https://provinces.open-api.vn/api/d/";

    @Override
    public void run(String... args) throws Exception {
        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th√¨ kh√¥ng fetch l·∫°i
        long existingTinhCount = tinhRepository.count();
        long existingHuyenCount = quanHuyenRepository.count();

        log.info("=== KI·ªÇM TRA D·ªÆ LI·ªÜU BAN ƒê·∫¶U ===");
        log.info("S·ªë l∆∞·ª£ng t·ªânh hi·ªán c√≥: {}", existingTinhCount);
        log.info("S·ªë l∆∞·ª£ng qu·∫≠n/huy·ªán hi·ªán c√≥: {}", existingHuyenCount);

        if (existingTinhCount > 0 && existingHuyenCount > 0) {
            log.info("D·ªØ li·ªáu t·ªânh v√† huy·ªán ƒë√£ t·ªìn t·∫°i. B·ªè qua vi·ªác fetch t·ª´ API.");
            return;
        }

        log.info("=== B·∫ÆT ƒê·∫¶U FETCH D·ªÆ LI·ªÜU T·ª™ API ===");

        try {
            // B∆∞·ªõc 1: Fetch v√† l∆∞u t·ªânh
            List<ProvinceApiResponse> provinces = fetchProvinces();
            if (provinces == null || provinces.isEmpty()) {
                log.error(" Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ªânh t·ª´ API");
                return;
            }

            // B∆∞·ªõc 2: L∆∞u t·ªânh v√†o database v√† t·∫°o map code -> t·ªânh
            Map<Integer, Tinh> provinceCodeMap = saveProvinces(provinces);

            // B∆∞·ªõc 3: Fetch v√† l∆∞u qu·∫≠n/huy·ªán
            List<DistrictFullApiResponse> districts = fetchDistricts();
            if (districts == null || districts.isEmpty()) {
                log.error(" Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu qu·∫≠n/huy·ªán t·ª´ API");
                return;
            }

            // B∆∞·ªõc 4: L∆∞u qu·∫≠n/huy·ªán
            saveDistricts(districts, provinceCodeMap);

            // Verify data after save
            long tinhCount = tinhRepository.count();
            long huyenCount = quanHuyenRepository.count();
            log.info("=== K·∫æT QU·∫¢ SAU KHI L∆ØU ===");
            log.info(" T·ªïng s·ªë t·ªânh trong DB: {}", tinhCount);
            log.info(" T·ªïng s·ªë qu·∫≠n/huy·ªán trong DB: {}", huyenCount);

        } catch (Exception e) {
            log.error(" L·ªói khi fetch d·ªØ li·ªáu t·ª´ API: {}", e.getMessage(), e);
        }
    }

    private List<ProvinceApiResponse> fetchProvinces() {
        try {
            HttpClient httpClient = HttpClient.newBuilder()
                    .followRedirects(HttpClient.Redirect.ALWAYS)
                    .build();

            JdkClientHttpRequestFactory requestFactory = new JdkClientHttpRequestFactory(httpClient);
            RestClient restClient = RestClient.builder()
                    .requestFactory(requestFactory)
                    .build();

            log.info(" ƒêang g·ªçi API T·ªânh: {}", PROVINCE_API_URL);

            String responseBody = restClient.get()
                    .uri(PROVINCE_API_URL)
                    .accept(MediaType.APPLICATION_JSON)
                    .header("User-Agent", "Mozilla/5.0")
                    .retrieve()
                    .body(String.class);

            if (responseBody == null || responseBody.trim().isEmpty()) {
                log.error(" API t·ªânh tr·∫£ v·ªÅ response r·ªóng");
                return null;
            }

            if (responseBody.trim().startsWith("<")) {
                log.error(" API t·ªânh tr·∫£ v·ªÅ HTML thay v√¨ JSON");
                return null;
            }

            log.info("ƒê√£ nh·∫≠n response t·ª´ API T·ªânh ({} k√Ω t·ª±)", responseBody.length());

            List<ProvinceApiResponse> provinces = objectMapper.readValue(
                    responseBody,
                    new TypeReference<List<ProvinceApiResponse>>() {}
            );

            log.info("‚úÖ Parse th√†nh c√¥ng {} t·ªânh", provinces.size());
            return provinces;

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi fetch t·ªânh: {}", e.getMessage(), e);
            return null;
        }
    }

    private List<DistrictFullApiResponse> fetchDistricts() {
        try {
            HttpClient httpClient = HttpClient.newBuilder()
                    .followRedirects(HttpClient.Redirect.ALWAYS)
                    .build();

            JdkClientHttpRequestFactory requestFactory = new JdkClientHttpRequestFactory(httpClient);
            RestClient restClient = RestClient.builder()
                    .requestFactory(requestFactory)
                    .build();

            log.info("üåê ƒêang g·ªçi API Qu·∫≠n/Huy·ªán: {}", DISTRICT_API_URL);

            String responseBody = restClient.get()
                    .uri(DISTRICT_API_URL)
                    .accept(MediaType.APPLICATION_JSON)
                    .header("User-Agent", "Mozilla/5.0")
                    .retrieve()
                    .body(String.class);

            if (responseBody == null || responseBody.trim().isEmpty()) {
                log.error("‚ùå API qu·∫≠n/huy·ªán tr·∫£ v·ªÅ response r·ªóng");
                return null;
            }

            if (responseBody.trim().startsWith("<")) {
                log.error("‚ùå API qu·∫≠n/huy·ªán tr·∫£ v·ªÅ HTML thay v√¨ JSON");
                return null;
            }

            log.info("‚úÖ ƒê√£ nh·∫≠n response t·ª´ API Qu·∫≠n/Huy·ªán ({} k√Ω t·ª±)", responseBody.length());

            List<DistrictFullApiResponse> districts = objectMapper.readValue(
                    responseBody,
                    new TypeReference<List<DistrictFullApiResponse>>() {}
            );

            log.info("‚úÖ Parse th√†nh c√¥ng {} qu·∫≠n/huy·ªán", districts.size());
            return districts;

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi fetch qu·∫≠n/huy·ªán: {}", e.getMessage(), e);
            return null;
        }
    }

    @Transactional
    public Map<Integer, Tinh> saveProvinces(List<ProvinceApiResponse> provinces) {
        log.info("üíæ B·∫Øt ƒë·∫ßu l∆∞u {} t·ªânh v√†o database...", provinces.size());

        Map<Integer, Tinh> provinceCodeMap = new HashMap<>();
        int savedCount = 0;

        for (ProvinceApiResponse provinceApi : provinces) {
            try {
                if (provinceApi.getName() == null || provinceApi.getName().trim().isEmpty()) {
                    continue;
                }

                Tinh tinh = Tinh.builder()
                        .tenTinh(provinceApi.getName())
                        .quanHuyenList(new ArrayList<>())
                        .build();

                tinh = tinhRepository.save(tinh);
                savedCount++;

                // L∆∞u v√†o map ƒë·ªÉ sau n√†y mapping v·ªõi qu·∫≠n/huy·ªán
                provinceCodeMap.put(provinceApi.getCode(), tinh);

                log.info("‚úÖ [{}/{}] L∆∞u t·ªânh: {} (code: {}, ID: {})",
                        savedCount, provinces.size(),
                        tinh.getTenTinh(), provinceApi.getCode(), tinh.getMaTinh());

            } catch (Exception e) {
                log.error("‚ùå L·ªói khi l∆∞u t·ªânh {}: {}", provinceApi.getName(), e.getMessage());
            }
        }

        tinhRepository.flush();
        log.info("‚úÖ ƒê√£ l∆∞u {} t·ªânh", savedCount);
        return provinceCodeMap;
    }

    @Transactional
    public void saveDistricts(List<DistrictFullApiResponse> districts,
                              Map<Integer, Tinh> provinceCodeMap) {
        log.info("üíæ B·∫Øt ƒë·∫ßu l∆∞u {} qu·∫≠n/huy·ªán v√†o database...", districts.size());

        int savedCount = 0;
        int skippedCount = 0;

        for (DistrictFullApiResponse districtApi : districts) {
            try {
                if (districtApi.getName() == null || districtApi.getName().trim().isEmpty()) {
                    skippedCount++;
                    continue;
                }

                // T√¨m t·ªânh t∆∞∆°ng ·ª©ng
                Tinh tinh = provinceCodeMap.get(districtApi.getProvinceCode());
                if (tinh == null) {
                    log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªânh v·ªõi code {} cho qu·∫≠n/huy·ªán {}",
                            districtApi.getProvinceCode(), districtApi.getName());
                    skippedCount++;
                    continue;
                }

                QuanHuyen quanHuyen = QuanHuyen.builder()
                        .tenQuanHuyen(districtApi.getName())
                        .tinh(tinh)
                        .build();

                quanHuyenRepository.save(quanHuyen);
                savedCount++;

                if (savedCount <= 10 || savedCount % 100 == 0) {
                    log.info("‚úÖ [{}/{}] L∆∞u qu·∫≠n/huy·ªán: {} (thu·ªôc {})",
                            savedCount, districts.size(),
                            quanHuyen.getTenQuanHuyen(), tinh.getTenTinh());
                }

            } catch (Exception e) {
                log.error("‚ùå L·ªói khi l∆∞u qu·∫≠n/huy·ªán {}: {}",
                        districtApi.getName(), e.getMessage());
                skippedCount++;
            }
        }

        quanHuyenRepository.flush();
        log.info("=== T·ªîNG K·∫æT QU·∫¨N/HUY·ªÜN ===");
        log.info("‚úÖ ƒê√£ l∆∞u: {}", savedCount);
        log.info("‚ö†Ô∏è B·ªè qua: {}", skippedCount);
    }
}